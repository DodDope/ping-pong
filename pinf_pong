from pygame import *
from random import randint


#класс-родитель для других спрайтов
class GameSprite(sprite.Sprite):
 #конструктор класса
   def __init__(self, player_image, player_x, player_y, size_x, size_y, player_speed):
       #Вызываем конструктор класса (Sprite):
       sprite.Sprite.__init__(self)


       #каждый спрайт должен хранить свойство image - изображение
       self.image = transform.scale(image.load(player_image), (size_x, size_y))
       self.speed = player_speed


       #каждый спрайт должен хранить свойство rect - прямоугольник, в который он вписан
       self.rect = self.image.get_rect()
       self.rect.x = player_x
       self.rect.y = player_y
 #метод, отрисовывающий героя на окне
   def reset(self):
       window.blit(self.image, (self.rect.x, self.rect.y))


#класс главного игрока
class Player(GameSprite):
   #метод для управления спрайтом стрелками клавиатуры
    def update_l(self):
        keys = key.get_pressed()
        if keys[K_w] and self.rect.y > 5:
            self.rect.y -= self.speed
        if keys[K_s] and self.rect.y < win_width -230:
            self.rect.y += self.speed
    def update_r(self):
        keys = key.get_pressed()
        if keys[K_UP] and self.rect.y > 5:
            self.rect.y -= self.speed
        if keys[K_DOWN] and self.rect.y < win_width -230:
            self.rect.y += self.speed

rocket_left = Player("Wall.png", 15, 100, 40, 140, 3)
rocket_right = Player("Wall.png", 535, 100, 40, 140, 3)
Ball = Player("Ball.png", 100, 200, 50, 50, 5)

speed_x = 3
speed_y = 3

win_width = 600
win_height = 500
display.set_caption("Ping-Pong")
window = display.set_mode((win_width, win_height))
back = (200, 255, 255)
window.fill(back)

game = True
finish = False
clock = time.Clock()
FPS = 60

while game:
    for e in event.get():
        if e.type == QUIT:
            game = False
   
    if finish != True:
        window.fill(back)

        rocket_left.reset()
        rocket_right.reset()
        Ball.reset()

        rocket_left.update_l()
        rocket_right.update_r()

        Ball.rect.x += speed_x
        Ball.rect.y += speed_y

        if sprite.collide_rect(rocket_left, Ball) or sprite.collide_rect(rocket_right, Ball):
            speed_x *= -1
        if Ball.rect.y > win_height-50 or Ball.rect.y < 10:
            speed_y *= -1
    display.update()
    clock.tick(FPS)
